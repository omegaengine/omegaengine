// Description: A shader that blends multiple textures together
// no specular lighting
// optional occlusion interval map for shadows
//
// Techniques:
// - Simple14 (ps_1_4, 4 textures, no lighting)
// - Simple20 (ps_2_0, 16 textures, no lighting)
// - Light14 (ps_1_4, 4 textures, per-vertex lighting)
// - Light20 (ps_2_0, 16 textures, per-pixel lighting)
// - Light2a (ps_2_a, 16 textures, per-pixel lighting, double sampling)
// - Light2b (ps_2_b, 16 textures, per-pixel lighting, double sampling)
// - SimpleBlack (vs_1_1, all black)
// - LightBlack (vs_1_1, all black)
//
// Passes:
// - AmbientLight (Light1 must be an ambient-only light, must be called as first pass)
// - TwoDirLights (Light1 and Light2 must be directional lights, must be called as first pass)
// - TwoDirLightsAdd (Light1 and Light2 must be directional lights, additive, must not be called as first pass)
// - OneDirLight (Light1 must be a directional light, must be called as first pass)
// - OneDirLightAdd (Light1 must be a directional light, additive, must not be called as first pass)
// - OnePointLight (Light1 must be a point light, must be called as first pass)
// - OnePointLightAdd (Light1 must be a point light, additive, must not be called as first pass)

static const float PI = 3.14159265;

//---------------- Parameters ----------------

// Camera
float3 cameraPosition          : CameraPosition;
float4x4 world                 : World;
float4x4 worldViewProjection   : WorldViewProjection;
float4x4 worldViewProjInv      : WorldViewProjectionInverse;
float4x4 worldInverseTranspose : WorldInverseTranspose;
float4x4 viewInverse           : ViewInverse;

// Light 1
float4 lightDirection1 : Direction < string Object = "Light1"; string Space = "World"; >;
float4 lightPosition1  : Position < string Object = "Light1"; string Space = "World"; >;
float3 attenuation1    : Attenuation < string Object = "Light1"; > = {1.0f, 0.0f, 0.0f};
float4 diffuseColor1   : Diffuse < string Object = "Light1"; > = {1.0f, 1.0f, 1.0f, 1.0f};
float4 ambientColor1   : Ambient = {0.1f, 0.1f, 0.1f, 1.0f};

// Light 2
float4 lightDirection2 : Direction < string Object = "Light2"; string Space = "World"; >;
float3 attenuation2    : Attenuation < string Object = "Light2"; > = {1.0f, 0.0f, 0.0f};
float4 diffuseColor2   : Diffuse < string Object = "Light2"; > = {0.0f, 0.0f, 0.0f, 1.0f};
float4 ambientColor2   : Ambient = {0.0f, 0.0f, 0.0f, 1.0f};

float shadowTwilightSize = 0.05;

// UV blending
float BlendDistance = 400;
float BlendWidth = 700;


//---------------- Textures ----------------

int FilterMode : FILTERMODE = 2; // 2 = Linear, 3 = Anisotropic

/// <Counter ID="main" Type="int" Min="1" Max="16" />
/// <Code Type="Repeat" Count="16"><![CDATA[texture Texture{main} : Diffuse;
/// sampler2D texture{main}Sampler = sampler_state
/// {
///   texture = <Texture{main}>;
///   AddressU = wrap; AddressV = wrap;
///   MinFilter = <FilterMode>; MagFilter = <FilterMode>; MipFilter = linear;
/// };]]></Code>


//---------------- Structs ----------------

struct inLight
{
    float3 entityPos          : POSITION;  // Position in object space
    float3 normal             : NORMAL;    // Normal vector in object space
    float2 texCoord           : TEXCOORD0; // Texture coordinates
    float4 occlusionIntervals : TEXCOORD1; // Angles when light 1 and 2 fist become visible and first become covered again
    float4 texWeights1        : TEXCOORD2;
    float4 texWeights2        : TEXCOORD3;
    float4 texWeights3        : TEXCOORD4;
    float4 texWeights4        : TEXCOORD5;
    float4 color              : COLOR0;
};

struct inSimple
{
    float3 entityPos          : POSITION;  // Position in object space
    float2 texCoord           : TEXCOORD0; // Texture coordinates
    float4 occlusionIntervals : TEXCOORD1; // Angles when light 1 and 2 fist become visible and first become covered again
    float4 texWeights1        : TEXCOORD2;
    float4 texWeights2        : TEXCOORD3;
    float4 texWeights3        : TEXCOORD4;
    float4 texWeights4        : TEXCOORD5;
    float4 color              : COLOR0;
};

/// <BeginFilter Target="PS2x" Lighting="true" />
struct outLight2x
{
    float4 pos                : POSITION;  // Position in clip space
    float zDepth              : TEXCOORD1; // Distance from the camera in clip space
    float3 worldPos           : TEXCOORD2; // Position in world space
    float3 normal             : TEXCOORD3; // Normal vector in world space
    float2 texCoord           : TEXCOORD0; // Texture coordinates
    float4 occlusionIntervals : TEXCOORD4; // Angles when light 1 and 2 fist become visible and first become covered again
    float4 texWeights1        : TEXCOORD5;
    float4 texWeights2        : TEXCOORD6;
    float4 texWeights3        : TEXCOORD7;
    float4 color              : COLOR0;
};
/// <EndFilter />

/// <BeginFilter Target="PS2x" Lighting="false" />
struct outSimple2x
{
    float4 pos         : POSITION;  // Position in clip space
    float zDepth       : TEXCOORD1; // Distance from the camera in clip space
    float3 worldPos    : TEXCOORD2; // Position in world space
    float2 texCoord    : TEXCOORD0; // Texture coordinates
    float4 texWeights1 : TEXCOORD3;
    float4 texWeights2 : TEXCOORD4;
    float4 texWeights3 : TEXCOORD5;
};
/// <EndFilter />

/// <BeginFilter Target="PS14" Lighting="false" />
struct outLight14
{
    float4 pos          : POSITION;  // Position in clip space
    float2 texCoord     : TEXCOORD0; // Texture coordinates
    float2 texWeights1  : TEXCOORD1;
    float2 texWeights2  : TEXCOORD2;
    float4 diffAmbColor : COLOR0;
    float4 color        : COLOR1;
};

struct outSimple14
{
    float4 pos         : POSITION;  // Position in clip space
    float2 texCoord    : TEXCOORD0; // Texture coordinates
    float2 texWeights1 : TEXCOORD1;
    float2 texWeights2 : TEXCOORD2;
};
/// <EndFilter />

struct outBlack {
  float4 pos   : POSITION; // Position in clip space
  float4 color : COLOR0;   // The effective color including lighting
};


//---------------- Helper functions ----------------

// Translate position vector to world space
float3 transWorld(float3 position)
{ return mul(float4(position, 1.0), world).xyz; }

// Translate position vector to projection/clip space
float4 transProj(float3 position)
{ return mul(float4(position, 1.0), worldViewProjection); }

// Translate normal vector to world space and normalize
float3 transNorm(float3 normal)
{ return normalize(mul(float4(normal, 0.0), worldInverseTranspose).xyz); }

/// <BeginFilter Lighting="true" />

float4 calcDirLight(float3 normal, float3 lightDir,
  float4 diffuseColor, float4 ambientColor) // Overload without shadows
{
    float diffuseFactor = saturate(dot(normal, lightDir));

    return diffuseColor * diffuseFactor + ambientColor;
}

float shadowSmoothstep(float focus, float angle)
{
    return smoothstep(focus, focus + shadowTwilightSize, angle);
}

float4 calcDirLight(float3 normal, float3 lightDir,
  float4 diffuseColor, float4 ambientColor, float4 occlusionIntervals) // Overload with shadows (light angles)
{
    // Calculate the angle between the light direction and an arrow pointing straight to the right
    float angle = atan2(lightDir.y, lightDir.x);

    float shadowFactor = saturate(
        min(shadowSmoothstep(occlusionIntervals.x, angle), 1 - shadowSmoothstep(occlusionIntervals.y, angle)) +
        min(shadowSmoothstep(occlusionIntervals.z, angle), 1 - shadowSmoothstep(occlusionIntervals.w, angle)));

    return calcDirLight(normal, lightDir, diffuseColor * shadowFactor, ambientColor);
}

float4 calcTwoDirLights(float3 normal,
  float3 lightDir1, float3 lightDir2,
  float4 diffCol1, float4 diffCol2,
  float4 ambCol1, float4 ambCol2,
  float4 occlusionIntervals1, float4 occlusionIntervals2)
{
    // Calculate separate light values
    float4 light1 = calcDirLight(normal, lightDir1, diffCol1, ambCol1, occlusionIntervals1);
    float4 light2 = calcDirLight(normal, lightDir2, diffCol2, ambCol2, occlusionIntervals2);

    // Add lights together
    return light1 + light2;
}

float4 calcPointLight(float3 worldPos, float3 normal, float3 lightPos,
  float4 diffuseColor, float4 ambientColor, float3 att)
{
    // Convert point to directional
    float3 lightDir = lightPos - worldPos;
    float lightDist = length(lightDir);
    float attenuation = 1 / (att.x + att.y * lightDist + att.z * lightDist * lightDist);

    // Simulate point-lighting by using pixel-wise directional-lighting
    return calcDirLight(normal, normalize(lightDir), diffuseColor, ambientColor) * attenuation;
}
/// <EndFilter />


//---------------- Vertex shaders ----------------

/// <BeginFilter Target="PS2x" Lighting="true" />
outLight2x VS_Light2x(inLight IN)
{
    outLight2x OUT;

    // Apply transforms
    OUT.pos = transProj(IN.entityPos);
    OUT.zDepth = OUT.pos.z;
    OUT.worldPos = transWorld(IN.entityPos);
    OUT.normal = transNorm(IN.normal);

    // ToDo: Compact the weights using the DynamicShader system
    OUT.texWeights1 = IN.texWeights1;
    OUT.texWeights2 = IN.texWeights2;
    OUT.texWeights3 = IN.texWeights3;

    OUT.texCoord = IN.texCoord;
    OUT.color = IN.color;
    OUT.occlusionIntervals = IN.occlusionIntervals;

    return OUT;
}
/// <EndFilter />

/// <BeginFilter Target="PS2x" Lighting="false" />
outSimple2x VS_Simple20(inSimple IN)
{
    outSimple2x OUT;

    // Apply transforms
    OUT.pos = transProj(IN.entityPos);
    OUT.zDepth = OUT.pos.z;
    OUT.worldPos = transWorld(IN.entityPos);

    // ToDo: Compact the weights using the DynamicShader system
    OUT.texWeights1 = IN.texWeights1;
    OUT.texWeights2 = IN.texWeights2;
    OUT.texWeights3 = IN.texWeights3;

    OUT.texCoord = IN.texCoord;

    return OUT;
}
/// <EndFilter />

/// <BeginFilter Target="PS14" Lighting="true" />
outLight14 VS_Light14(inLight IN,  // Overload for ambient-only light
  uniform float4 ambCol)
{
    outLight14 OUT;

    // Apply transforms
    OUT.pos = transProj(IN.entityPos);

    // ToDo: Compact the weights using the DynamicShader system
    OUT.texWeights1 = IN.texWeights1.xy;
    OUT.texWeights2 = IN.texWeights1.zw;

    OUT.texCoord = IN.texCoord;
    OUT.diffAmbColor = ambCol;
    OUT.color = IN.color;

    return OUT;
}

outLight14 VS_Light14(inLight IN,  // Overload for two directional lights
  uniform float3 lightDir1, uniform float3 lightDir2,
  uniform float4 diffCol1, uniform float4 diffCol2,
  uniform float4 ambCol1, uniform float4 ambCol2)
{
    outLight14 OUT;

    // Apply transforms
    OUT.pos = transProj(IN.entityPos);

    // ToDo: Compact the weights using the DynamicShader system
    OUT.texWeights1 = IN.texWeights1.xy;
    OUT.texWeights2 = IN.texWeights1.zw;

    OUT.texCoord = IN.texCoord;
    OUT.diffAmbColor = calcTwoDirLights(transNorm(IN.normal),
      lightDir1, lightDir2, diffCol1, diffCol2, ambCol1, ambCol2, IN.occlusionIntervals, IN.occlusionIntervals);
    OUT.color = IN.color;

    return OUT;
}

outLight14 VS_Light14(inLight IN,  // Overload for one directional light
  uniform float3 lightDir, uniform float4 diffCol, uniform float4 ambCol)
{
    outLight14 OUT;

    // Apply transforms
    OUT.pos = transProj(IN.entityPos);

    // ToDo: Compact the weights using the DynamicShader system
    OUT.texWeights1 = IN.texWeights1.xy;
    OUT.texWeights2 = IN.texWeights1.zw;

    OUT.texCoord = IN.texCoord;
    OUT.diffAmbColor = calcDirLight(transNorm(IN.normal), lightDir, diffCol, ambCol);
    OUT.color = IN.color;

    return OUT;
}

outLight14 VS_Light14(inLight IN,  // Overload for one point light
  uniform float3 lightPos, uniform float4 diffCol, uniform float4 ambCol, uniform float3 att)
{
    outLight14 OUT;

    // Apply transforms
    OUT.pos = transProj(IN.entityPos);

    // ToDo: Compact the weights using the DynamicShader system
    OUT.texWeights1 = IN.texWeights1.xy;
    OUT.texWeights2 = IN.texWeights1.zw;

    OUT.texCoord = IN.texCoord;
    OUT.diffAmbColor = calcPointLight(transWorld(IN.entityPos), OUT.pos, transNorm(IN.normal), lightPos, diffCol, ambCol, att);
    OUT.color = IN.color;

    return OUT;
}
/// <EndFilter />

/// <BeginFilter Target="PS14" Lighting="false" />
outSimple14 VS_Simple14(inSimple IN)
{
    outSimple14 OUT;

    // Apply transforms
    OUT.pos = transProj(IN.entityPos);

    // ToDo: Compact the weights using the DynamicShader system
    OUT.texWeights1 = IN.texWeights1.xy;
    OUT.texWeights2 = IN.texWeights1.zw;

    OUT.texCoord = IN.texCoord;

    return OUT;
}
/// <EndFilter />

outBlack VS_LightBlack(inLight IN)
{
    outBlack OUT;

    // Apply transforms
    OUT.pos = transProj(IN.entityPos);

    OUT.color = 0;

    return OUT;
}

outBlack VS_SimpleBlack(inSimple IN)
{
    outBlack OUT;

    // Apply transforms
    OUT.pos = transProj(IN.entityPos);

    OUT.color = 0;

    return OUT;
}


//---------------- Pixel shaders ----------------

/// <BeginFilter Target="PS2ab" Lighting="true" />
float4 PS_Helper2ab(float zDepth, float2 texCoord, float4 texWeights1, float4 texWeights2, float4 texWeights3)
{
    // Calculate color values for high camera distance
    float2 farTextureCoords = texCoord * 0.8;
    float4 farColor = 0;
    /// <Counter ID="main" Type="int" Min="1" Max="16" />
    /// <Counter ID="group" Type="int-step" Min="1" Max="3" Step="0.25" />
    /// <Counter ID="component" Type="char">
    ///   <Char>x</Char>
    ///   <Char>y</Char>
    ///   <Char>z</Char>
    ///   <Char>w</Char>
    /// </Counter>
    /// <Code Type="Sync" Controller="textures" Max="16"><![CDATA[    farColor += tex2D(texture{main}Sampler, farTextureCoords) * texWeights{group}.{component};]]></Code>

    // Calculate color values for low camera distance
    float2 nearTextureCoords = texCoord * 3.9;
    float4 nearColor = 0;
    /// <Counter ID="main" Type="int" Min="1" Max="16" />
    /// <Counter ID="group" Type="int-step" Min="1" Max="3" Step="0.25" />
    /// <Counter ID="component" Type="char">
    ///   <Char>x</Char>
    ///   <Char>y</Char>
    ///   <Char>z</Char>
    ///   <Char>w</Char>
    /// </Counter>
    /// <Code Type="Sync" Controller="textures" Max="16"><![CDATA[    nearColor += tex2D(texture{main}Sampler, nearTextureCoords) * texWeights{group}.{component};]]></Code>

    // Calculate distance blend factor
    float blendFactor = clamp((zDepth-BlendDistance)/BlendWidth, 0.05, 0.95);
    return farColor*blendFactor + nearColor*(1-blendFactor);
}

float4 PS_Light2ab(outLight2x IN,  // Overload for ambient-only light
  uniform float4 ambCol) : COLOR
{
    return PS_Helper2ab(IN.zDepth, IN.texCoord, IN.texWeights1, IN.texWeights2, IN.texWeights3) * ambCol * IN.color;
}

float4 PS_Light2ab(outLight2x IN,  // Overload for two directional lights
  uniform float3 lightDir1, uniform float3 lightDir2,
  uniform float4 diffCol1, uniform float4 diffCol2,
  uniform float4 ambCol1, uniform float4 ambCol2) : COLOR
{
    float4 diffAmbColor = calcTwoDirLights(IN.normal,
      lightDir1, lightDir2, diffCol1, diffCol2, ambCol1, ambCol2, IN.occlusionIntervals, IN.occlusionIntervals);
    return PS_Helper2ab(IN.zDepth, IN.texCoord, IN.texWeights1, IN.texWeights2, IN.texWeights3) * diffAmbColor * IN.color;
}

float4 PS_Light2ab(outLight2x IN,  // Overload for one directional light
  uniform float3 lightDir, uniform float4 diffCol, uniform float4 ambCol) : COLOR
{
    float4 diffAmbColor = calcDirLight(IN.normal, lightDir, diffCol, ambCol, IN.occlusionIntervals);
    return PS_Helper2ab(IN.zDepth, IN.texCoord, IN.texWeights1, IN.texWeights2, IN.texWeights3) * diffAmbColor * IN.color;
}

float4 PS_Light2ab(outLight2x IN,  // Overload for one point light
  uniform float3 lightPos, uniform float4 diffCol, uniform float4 ambCol, uniform float3 att) : COLOR
{
    float4 diffAmbColor = calcPointLight(IN.worldPos, IN.normal, lightPos, diffCol, ambCol, att);
    return PS_Helper2ab(IN.zDepth, IN.texCoord, IN.texWeights1, IN.texWeights2, IN.texWeights3) * diffAmbColor * IN.color;
}
/// <EndFilter />

/// <BeginFilter Target="PS2x" />
float4 PS_Helper20(float2 texCoord, float4 texWeights1, float4 texWeights2, float4 texWeights3)
{
    // Calculate color values for high camera distance
    float4 color = 0;
    /// <Counter ID="main" Type="int" Min="1" Max="16" />
    /// <Counter ID="group" Type="int-step" Min="1" Max="4" Step="0.25" />
    /// <Counter ID="component" Type="char">
    ///   <Char>x</Char>
    ///   <Char>y</Char>
    ///   <Char>z</Char>
    ///   <Char>w</Char>
    /// </Counter>
    /// <Code Type="Sync" Controller="textures" Max="16"><![CDATA[    color += tex2D(texture{main}Sampler, texCoord) * texWeights{group}.{component};]]></Code>

    return color;
}
/// <EndFilter />

/// <BeginFilter Target="PS2x" Lighting="true" />
float4 PS_Light20(outLight2x IN,  // Overload for ambient-only light
  uniform float4 ambCol) : COLOR
{
    return PS_Helper20(IN.texCoord, IN.texWeights1, IN.texWeights2, IN.texWeights3) * ambCol * IN.color;
}

float4 PS_Light20(outLight2x IN,  // Overload for two directional lights
  uniform float3 lightDir1, uniform float3 lightDir2,
  uniform float4 diffCol1, uniform float4 diffCol2,
  uniform float4 ambCol1, uniform float4 ambCol2) : COLOR
{
    float4 diffAmbColor = calcTwoDirLights(IN.normal,
      lightDir1, lightDir2, diffCol1, diffCol2, ambCol1, ambCol2, IN.occlusionIntervals, IN.occlusionIntervals);
    return PS_Helper20(IN.texCoord, IN.texWeights1, IN.texWeights2, IN.texWeights3) * diffAmbColor * IN.color;
}

float4 PS_Light20(outLight2x IN,  // Overload for one directional light
  uniform float3 lightDir, uniform float4 diffCol, uniform float4 ambCol) : COLOR
{
    float4 diffAmbColor = calcDirLight(IN.normal, lightDir, diffCol, ambCol, IN.occlusionIntervals);
    return PS_Helper20(IN.texCoord, IN.texWeights1, IN.texWeights2, IN.texWeights3) * diffAmbColor * IN.color;
}

float4 PS_Light20(outLight2x IN,  // Overload for one point light
  uniform float3 lightPos, uniform float4 diffCol, uniform float4 ambCol, uniform float3 att) : COLOR
{
    float4 diffAmbColor = calcPointLight(IN.worldPos, IN.normal, lightPos, diffCol, ambCol, att);
    return PS_Helper20(IN.texCoord, IN.texWeights1, IN.texWeights2, IN.texWeights3) * diffAmbColor * IN.color;
}
/// <EndFilter />

/// <BeginFilter Target="PS2x" Lighting="false" />
float4 PS_Simple20(outSimple2x IN) : COLOR
{
    return PS_Helper20(IN.texCoord, IN.texWeights1, IN.texWeights2, IN.texWeights3);
}
/// <EndFilter />

/// <BeginFilter Target="PS14" Lighting="false" />
float4 PS_Light14(outLight14 IN) : COLOR
{
    // Calculate color values
    float4 color = 0;
    /// <Counter ID="main" Type="int" Min="1" Max="4" />
    /// <Counter ID="group" Type="int-step" Min="1" Max="2" Step="0.5" />
    /// <Counter ID="component" Type="char">
    ///   <Char>x</Char>
    ///   <Char>y</Char>
    /// </Counter>
    /// <Code Type="Sync" Controller="textures" Max="4"><![CDATA[    color += tex2D(texture{main}Sampler, IN.texCoord)*IN.texWeights{group}.{component};]]></Code>

    // Apply lighting and distance blending
    return color * IN.diffAmbColor * IN.color;
}

float4 PS_Simple14(outSimple14 IN) : COLOR
{
    // Calculate color values
    float4 color = 0;
    /// <Counter ID="main" Type="int" Min="1" Max="4" />
    /// <Counter ID="group" Type="int-step" Min="1" Max="2" Step="0.5" />
    /// <Counter ID="component" Type="char">
    ///   <Char>x</Char>
    ///   <Char>y</Char>
    /// </Counter>
    /// <Code Type="Sync" Controller="textures" Max="4"><![CDATA[    color += tex2D(texture{main}Sampler, IN.texCoord)*IN.texWeights{group}.{component};]]></Code>

    // Apply lighting and distance blending
    return color;
}
/// <EndFilter />


//---------------- Techniques ----------------

#define ADDITIVE_STATES ZWriteEnable = false; ZFunc = LessEqual; CullMode = None; AlphaBlendEnable = true; SrcBlend = One; DestBlend = One;

/// <BeginFilter Target="PS14" Lighting="false" />
technique Simple14
{
  pass NoLights
  {
    VertexShader = compile vs_1_1 VS_Simple14();
    PixelShader = compile ps_1_4 PS_Simple14();
  }
}
/// <EndFilter />

/// <BeginFilter Target="PS2x" Lighting="false" />
technique Simple20
{
  pass NoLights
  {
    VertexShader = compile vs_1_1 VS_Simple20();
    PixelShader = compile ps_2_0 PS_Simple20();
  }
}
/// <EndFilter />

/// <BeginFilter Target="PS14" Lighting="true" />
technique Light14
{
  pass AmbientLight
  {
    VertexShader = compile vs_1_1 VS_Light14(ambientColor1);
    PixelShader = compile ps_1_4 PS_Light14();
  }

  pass TwoDirLights
  {
    VertexShader = compile vs_1_1 VS_Light14(-lightDirection1.xyz, -lightDirection2.xyz, diffuseColor1, diffuseColor2, ambientColor1, ambientColor2);
    PixelShader = compile ps_1_4 PS_Light14();
  }

  pass TwoDirLights
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light14(-lightDirection1.xyz, -lightDirection2.xyz, diffuseColor1, diffuseColor2, ambientColor1, ambientColor2);
    PixelShader = compile ps_1_4 PS_Light14();
  }

  pass OneDirLight
  {
    VertexShader = compile vs_1_1 VS_Light14(-lightDirection1.xyz, diffuseColor1, ambientColor1);
    PixelShader = compile ps_1_4 PS_Light14();
  }

  pass OneDirLight
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light14(-lightDirection1.xyz, diffuseColor1, ambientColor1);
    PixelShader = compile ps_1_4 PS_Light14();
  }

  pass OnePointLight
  {
    VertexShader = compile vs_1_1 VS_Light14(lightPosition1.xyz, diffuseColor1, ambientColor1, attenuation1);
    PixelShader = compile ps_1_4 PS_Light14();
  }

  pass OnePointLightAdd
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light14(lightPosition1.xyz, diffuseColor1, ambientColor1, attenuation1);
    PixelShader = compile ps_1_4 PS_Light14();
  }
}
/// <EndFilter />

/// <BeginFilter Target="PS2x" Lighting="true" />
technique Light20
{
  pass AmbientLight
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_a PS_Light20(ambientColor1);
  }

  pass TwoDirLights
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_0 PS_Light20(-lightDirection1.xyz, -lightDirection2.xyz, diffuseColor1, diffuseColor2, ambientColor1, ambientColor2);
  }

  pass TwoDirLightsAdd
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_0 PS_Light20(-lightDirection1.xyz, -lightDirection2.xyz, diffuseColor1, diffuseColor2, ambientColor1, ambientColor2);
  }

  pass OneDirLight
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_0 PS_Light20(-lightDirection1.xyz, diffuseColor1, ambientColor1);
  }

  pass OneDirLightAdd
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_0 PS_Light20(-lightDirection1.xyz, diffuseColor1, ambientColor1);
  }

  pass OnePointLight
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_0 PS_Light20(lightPosition1.xyz, diffuseColor1, ambientColor1, attenuation1);
  }

  pass OnePointLightAdd
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_0 PS_Light20(lightPosition1.xyz, diffuseColor1, ambientColor1, attenuation1);
  }
}
/// <EndFilter />


/// <BeginFilter Target="PS2a" Lighting="true" />
technique Light2a
{
  pass AmbientLight
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_a PS_Light2ab(ambientColor1);
  }

  pass TwoDirLights
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_a PS_Light2ab(-lightDirection1.xyz, -lightDirection2.xyz, diffuseColor1, diffuseColor2, ambientColor1, ambientColor2);
  }

  pass TwoDirLightsAdd
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_a PS_Light2ab(-lightDirection1.xyz, -lightDirection2.xyz, diffuseColor1, diffuseColor2, ambientColor1, ambientColor2);
  }

  pass OneDirLight
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_a PS_Light2ab(-lightDirection1.xyz, diffuseColor1, ambientColor1);
  }

  pass OneDirLightAdd
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_a PS_Light2ab(-lightDirection1.xyz, diffuseColor1, ambientColor1);
  }

  pass OnePointLight
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_a PS_Light2ab(lightPosition1.xyz, diffuseColor1, ambientColor1, attenuation1);
  }

  pass OnePointLightAdd
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_a PS_Light2ab(lightPosition1.xyz, diffuseColor1, ambientColor1, attenuation1);
  }
}
/// <EndFilter />

/// <BeginFilter Target="PS2b" Lighting="true" />
technique Light2b
{
  pass AmbientLight
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_b PS_Light2ab(ambientColor1);
  }

  pass TwoDirLights
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_b PS_Light2ab(-lightDirection1.xyz, -lightDirection2.xyz, diffuseColor1, diffuseColor2, ambientColor1, ambientColor2);
  }

  pass TwoDirLightsAdd
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_b PS_Light2ab(-lightDirection1.xyz, -lightDirection2.xyz, diffuseColor1, diffuseColor2, ambientColor1, ambientColor2);
  }

  pass OneDirLight
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_b PS_Light2ab(-lightDirection1.xyz, diffuseColor1, ambientColor1);
  }

  pass OneDirLightAdd
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_b PS_Light2ab(-lightDirection1.xyz, diffuseColor1, ambientColor1);
  }

  pass OnePointLight
  {
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_b PS_Light2ab(lightPosition1.xyz, diffuseColor1, ambientColor1, attenuation1);
  }

  pass OnePointLightAdd
  {
    ADDITIVE_STATES
    VertexShader = compile vs_1_1 VS_Light2x();
    PixelShader = compile ps_2_b PS_Light2ab(lightPosition1.xyz, diffuseColor1, ambientColor1, attenuation1);
  }
}
/// <EndFilter />

technique SimpleBlack
{
  pass Black
  {
    VertexShader = compile vs_1_1 VS_SimpleBlack();
    PixelShader = null;
  }
}

technique LightBlack
{
  pass Black
  {
    VertexShader = compile vs_1_1 VS_LightBlack();
    PixelShader = null;
  }
}
