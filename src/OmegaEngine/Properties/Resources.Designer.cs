//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OmegaEngine.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("OmegaEngine.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value must be smaller than 90 degrees.
        /// </summary>
        internal static string AngleNotBelow90 {
            get {
                return ResourceManager.GetString("AngleNotBelow90", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument may not be less than zero..
        /// </summary>
        internal static string ArgMustNotBeNegative {
            get {
                return ResourceManager.GetString("ArgMustNotBeNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This game is not supported by your graphics card..
        /// </summary>
        internal static string BadGraphics {
            get {
                return ResourceManager.GetString("BadGraphics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method may be called only once on this object..
        /// </summary>
        internal static string CallMethodOnlyOnce {
            get {
                return ResourceManager.GetString("CallMethodOnlyOnce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required version of DirectX is not installed on your computer..
        /// </summary>
        internal static string DirectXMissing {
            get {
                return ResourceManager.GetString("DirectXMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to dump view data to file..
        /// </summary>
        internal static string DumpFail {
            get {
                return ResourceManager.GetString("DumpFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The dynamic shader could not be compiled..
        /// </summary>
        internal static string DynamicShaderCompileFail {
            get {
                return ResourceManager.GetString("DynamicShaderCompileFail", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Engine can not be changed again once it has been set..
        /// </summary>
        internal static string EngineCannotChange {
            get {
                return ResourceManager.GetString("EngineCannotChange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Engine has not been set yet..
        /// </summary>
        internal static string EngineNotSetYet {
            get {
                return ResourceManager.GetString("EngineNotSetYet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The screenshot resolution must not exceed the current render resolution..
        /// </summary>
        internal static string InvalidScreenshotSize {
            get {
                return ResourceManager.GetString("InvalidScreenshotSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item is already in a pool. It can not be added to more than one pool..
        /// </summary>
        internal static string ItemAlreadyInPool {
            get {
                return ResourceManager.GetString("ItemAlreadyInPool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DeactivateLights was not called after the last render pass..
        /// </summary>
        internal static string LightsNotDeactivated {
            get {
                return ResourceManager.GetString("LightsNotDeactivated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Loading music....
        /// </summary>
        internal static string LoadingMusic {
            get {
                return ResourceManager.GetString("LoadingMusic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mesh doesn&apos;t use 16-bit indices..
        /// </summary>
        internal static string MeshIndexBufferNot16bit {
            get {
                return ResourceManager.GetString("MeshIndexBufferNot16bit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mesh doesn&apos;t use 32-bit indices..
        /// </summary>
        internal static string MeshIndexBufferNot32bit {
            get {
                return ResourceManager.GetString("MeshIndexBufferNot32bit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need a graphics card that supports at least Shader Model {0}..
        /// </summary>
        internal static string MinimumShaderModel {
            get {
                return ResourceManager.GetString("MinimumShaderModel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The engine debug interface cannot be activated while in fullscreen mode..
        /// </summary>
        internal static string NoDebugInFullscreen {
            get {
                return ResourceManager.GetString("NoDebugInFullscreen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your graphics card does not support linear texture filtering..
        /// </summary>
        internal static string NoLinearTextureFiltering {
            get {
                return ResourceManager.GetString("NoLinearTextureFiltering", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The terrain color can&apos;t be modified if terrain lighting is disabled..
        /// </summary>
        internal static string NoModifyTerrainColorWithoutLighting {
            get {
                return ResourceManager.GetString("NoModifyTerrainColorWithoutLighting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The terrain height-map can&apos;t be modified if terrain lighting is enabled..
        /// </summary>
        internal static string NoModifyTerrainHeightWithLighting {
            get {
                return ResourceManager.GetString("NoModifyTerrainHeightWithLighting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no such body found: .
        /// </summary>
        internal static string NoSuchBody {
            get {
                return ResourceManager.GetString("NoSuchBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was no such light source found:.
        /// </summary>
        internal static string NoSuchLightSource {
            get {
                return ResourceManager.GetString("NoSuchLightSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required graphics feature was not available.
        /// </summary>
        internal static string NotAvailable {
            get {
                return ResourceManager.GetString("NotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following shader data file could not be found:.
        /// </summary>
        internal static string NotFoundShaderFile {
            get {
                return ResourceManager.GetString("NotFoundShaderFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This shader is not supported by your graphics card..
        /// </summary>
        internal static string NotSupportedShader {
            get {
                return ResourceManager.GetString("NotSupportedShader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value must be a real number..
        /// </summary>
        internal static string NumberNotReal {
            get {
                return ResourceManager.GetString("NumberNotReal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Release method was called to often on {0}..
        /// </summary>
        internal static string ReleasedTooOften {
            get {
                return ResourceManager.GetString("ReleasedTooOften", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This song was loaded more than once: .
        /// </summary>
        internal static string SongAlreadyLoaded {
            get {
                return ResourceManager.GetString("SongAlreadyLoaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to load song: .
        /// </summary>
        internal static string SongLoadFailed {
            get {
                return ResourceManager.GetString("SongLoadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified vertex format is not known..
        /// </summary>
        internal static string UnknownVertexFormat {
            get {
                return ResourceManager.GetString("UnknownVertexFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value must be greater than 0..
        /// </summary>
        internal static string ValueNotPositive {
            get {
                return ResourceManager.GetString("ValueNotPositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The vertex buffer must use a fixed-function vertex format..
        /// </summary>
        internal static string VBMustBeFVF {
            get {
                return ResourceManager.GetString("VBMustBeFVF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The following file was previously loaded as a different asset type: .
        /// </summary>
        internal static string WrongAssetType {
            get {
                return ResourceManager.GetString("WrongAssetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Height-map size must equal terrain size..
        /// </summary>
        internal static string WrongHeightMapSize {
            get {
                return ResourceManager.GetString("WrongHeightMapSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Occlusion interval map size must equal terrain size..
        /// </summary>
        internal static string WrongOcclusionIntervalMapSize {
            get {
                return ResourceManager.GetString("WrongOcclusionIntervalMapSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The array must have a length of {0}..
        /// </summary>
        internal static string WrongTexArrayLength {
            get {
                return ResourceManager.GetString("WrongTexArrayLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Texture-map size must be exactly a third of the terrain size..
        /// </summary>
        internal static string WrongTextureMapSize {
            get {
                return ResourceManager.GetString("WrongTextureMapSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of vertexes must be a multiple of 2 for a LineList..
        /// </summary>
        internal static string WrongVertexCountLine {
            get {
                return ResourceManager.GetString("WrongVertexCountLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Number of vertexes must be a multiple of 3 for a TriangleList..
        /// </summary>
        internal static string WrongVertexCountTriangle {
            get {
                return ResourceManager.GetString("WrongVertexCountTriangle", resourceCulture);
            }
        }
    }
}
